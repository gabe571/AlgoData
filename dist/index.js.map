{"version":3,"sources":["app.js","index.js"],"names":["http","require","fs","path","mimeTypes","app","createServer","request","response","filePath","join","__dirname","url","extname","String","toLowerCase","contentType","readFile","error","content","writeHead","end","code","module","exports","port","listen","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,SAAS,GAAG;AAChB,WAAS,WADO;AAEhB,SAAO,iBAFS;AAGhB,UAAQ,UAHQ;AAIhB,WAAS,kBAJO;AAKhB,UAAQ,WALQ;AAMhB,UAAQ,WANQ;AAOhB,UAAQ,WAPQ;AAQhB,UAAQ,WARQ;AAShB,UAAQ,WATQ;AAUhB,WAAS,uBAVO;AAWhB,UAAQ,sBAXQ;AAYhB,UAAQ,+BAZQ;AAahB,UAAQ,sBAbQ;AAchB,UAAQ;AAdQ,CAAlB;AAiBA,MAAMC,GAAG,GAAGL,IAAI,CAACM,YAAL,CAAkB,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACnD,MAAIC,QAAQ,GAAGN,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+BJ,OAAO,CAACK,GAAvC,CAAf;AACA,MAAIH,QAAQ,KAAKN,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,GAA/B,CAAjB,EAAsDF,QAAQ,GAAGN,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,YAA/B,CAAX;AAEtD,QAAME,OAAO,GAAGC,MAAM,CAACX,IAAI,CAACU,OAAL,CAAaJ,QAAb,CAAD,CAAN,CAA+BM,WAA/B,EAAhB;AACA,QAAMC,WAAW,GAAGZ,SAAS,CAACS,OAAD,CAAT,IAAsB,0BAA1C;AAEAX,EAAAA,EAAE,CAACe,QAAH,CAAYR,QAAZ,EAAsB,CAACS,KAAD,EAAQC,OAAR,KAAoB;AACxC,QAAID,KAAJ,EAAW;AACTV,MAAAA,QAAQ,CAACY,SAAT,CAAmB,GAAnB;AACAZ,MAAAA,QAAQ,CAACa,GAAT,CAAc,+CAA8CH,KAAK,CAACI,IAAK,OAAvE;AACAd,MAAAA,QAAQ,CAACa,GAAT;AACD,KAJD,MAIO;AACLb,MAAAA,QAAQ,CAACY,SAAT,CAAmB,GAAnB,EAAwB;AAAE,wBAAgBJ;AAAlB,OAAxB;AACAR,MAAAA,QAAQ,CAACa,GAAT,CAAaF,OAAb,EAAsB,OAAtB;AACD;AACF,GATD;AAUD,CAjBW,CAAZ;AAqBAI,MAAM,CAACC,OAAP,GAAiBnB,GAAjB;;AC1CA,MAAMA,GAAG,GAAGJ,OAAO,CAAC,OAAD,CAAnB;;AAEA,MAAMwB,IAAI,GAAG,MAAb;AAEApB,GAAG,CAACqB,MAAJ,CAAWD,IAAX,EAAiB,MAAM;AACrBE,EAAAA,OAAO,CAACC,GAAR,CAAa,+BAA8BH,IAAK,KAAhD;AACD,CAFD","file":"index.js","sourceRoot":"../src","sourcesContent":["const http = require('http');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst mimeTypes = {\r\n  '.html': 'text/html',\r\n  '.js': 'text/javascript',\r\n  '.css': 'text/css',\r\n  '.json': 'application/json',\r\n  '.png': 'image/png',\r\n  '.jpg': 'image/jpg',\r\n  '.gif': 'image/gif',\r\n  '.wav': 'audio/wav',\r\n  '.mp4': 'video/mp4',\r\n  '.woff': 'application/font-woff',\r\n  '.ttf': 'application/font-ttf',\r\n  '.eot': 'application/vnd.ms-fontobject',\r\n  '.otf': 'application/font-otf',\r\n  '.svg': 'application/image/svg+xml',\r\n};\r\n\r\nconst app = http.createServer((request, response) => {\r\n  let filePath = path.join(__dirname, 'public', request.url);\r\n  if (filePath === path.join(__dirname, 'public', '/')) filePath = path.join(__dirname, 'public', 'index.html');\r\n\r\n  const extname = String(path.extname(filePath)).toLowerCase();\r\n  const contentType = mimeTypes[extname] || 'application/octet-stream';\r\n\r\n  fs.readFile(filePath, (error, content) => {\r\n    if (error) {\r\n      response.writeHead(500);\r\n      response.end(`Sorry, check with the site admin for error: ${error.code} ..\\n`);\r\n      response.end();\r\n    } else {\r\n      response.writeHead(200, { 'Content-Type': contentType });\r\n      response.end(content, 'utf-8');\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\nmodule.exports = app;","const app = require('./app');\r\n\r\nconst port = '8888';\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is listening on port ${port}...`);\r\n});"]}